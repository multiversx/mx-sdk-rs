{
    "buildInfo": {
        "rustc": {
            "version": "x.x.x-nightly",
            "commitHash": "<commit hash here>",
            "commitDate": "<commit date here>",
            "channel": "Channel",
            "short": "rustc <version> (<short hash> <date>)"
        },
        "contractCrate": {
            "name": "use-module",
            "version": "0.0.0",
            "gitVersion": "<git version here>"
        },
        "framework": {
            "name": "multiversx-sc",
            "version": "0.45.2"
        }
    },
    "docs": [
        "Contract that tests that using modules works correctly.",
        "Also provides testing for the most common modules:",
        "- DnsModule",
        "- FeaturesModule",
        "- EsdtModule",
        "- GovernanceModule",
        "- PauseModule"
    ],
    "name": "UseModule",
    "constructor": {
        "docs": [
            "The constructor can reside in a module.",
            "The method can have any name."
        ],
        "inputs": [],
        "outputs": []
    },
    "endpoints": [
        {
            "docs": [
                "Validates that the \"featureName\" feature is on.",
                "Uses the `feature_guard!` macro."
            ],
            "name": "checkFeatureGuard",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "checkPause",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "call_contract_base_full_path_endpoint",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_contract_base_endpoint",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_mod_a",
            "mutability": "readonly",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_mod_b",
            "mutability": "readonly",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_mod_c",
            "mutability": "readonly",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "only_owner_mod_endpoint",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_derived_not_owner_only",
            "mutability": "readonly",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "only_admin_mod_endpoint",
            "onlyAdmin": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "call_derived_not_admin_only",
            "mutability": "readonly",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "countTo100",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "OperationCompletionStatus"
                }
            ]
        },
        {
            "name": "mergeTokens",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": [
                {
                    "type": "EsdtTokenPayment"
                }
            ]
        },
        {
            "name": "mergeTokensCustomAttributes",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": [
                {
                    "type": "EsdtTokenPayment"
                }
            ]
        },
        {
            "name": "splitTokens",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": [
                {
                    "type": "List<EsdtTokenPayment>"
                }
            ]
        },
        {
            "name": "splitTokenPartial",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [
                {
                    "name": "tokens_to_remove",
                    "type": "List<EsdtTokenPayment>"
                }
            ],
            "outputs": [
                {
                    "type": "List<EsdtTokenPayment>"
                }
            ]
        },
        {
            "name": "claimDeveloperRewards",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "child_sc_address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "dnsRegister",
            "onlyOwner": true,
            "mutability": "mutable",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [
                {
                    "name": "dns_address",
                    "type": "Address"
                },
                {
                    "name": "name",
                    "type": "bytes"
                }
            ],
            "outputs": []
        },
        {
            "name": "issueToken",
            "onlyOwner": true,
            "mutability": "mutable",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [
                {
                    "name": "token_display_name",
                    "type": "bytes"
                },
                {
                    "name": "token_ticker",
                    "type": "bytes"
                },
                {
                    "name": "token_type",
                    "type": "EsdtTokenType"
                },
                {
                    "name": "opt_num_decimals",
                    "type": "optional<u32>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "setFeatureFlag",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "feature_name",
                    "type": "bytes"
                },
                {
                    "name": "value",
                    "type": "bool"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Used to deposit tokens for \"payable\" actions.",
                "Funds will be returned if the proposal is defeated.",
                "To keep the logic simple, all tokens have to be deposited at once"
            ],
            "name": "depositTokensForProposal",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "name": "withdrawGovernanceTokens",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Propose a list of actions.",
                "A maximum of MAX_GOVERNANCE_PROPOSAL_ACTIONS can be proposed at a time.",
                "",
                "An action has the following format:",
                "    - gas limit for action execution",
                "    - destination address",
                "    - a vector of ESDT transfers, in the form of ManagedVec<EsdTokenPayment>",
                "    - endpoint to be called on the destination",
                "    - a vector of arguments for the endpoint, in the form of ManagedVec<ManagedBuffer>",
                "",
                "Returns the ID of the newly created proposal."
            ],
            "name": "propose",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [
                {
                    "name": "description",
                    "type": "bytes"
                },
                {
                    "name": "actions",
                    "type": "variadic<multi<u64,Address,bytes,List<bytes>>>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Vote on a proposal by depositing any amount of governance tokens",
                "These tokens will be locked until the proposal is executed or cancelled."
            ],
            "name": "vote",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                },
                {
                    "name": "vote",
                    "type": "VoteType"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Queue a proposal for execution.",
                "This can be done only if the proposal has reached the quorum.",
                "A proposal is considered successful and ready for queing if",
                "total_votes - total_downvotes >= quorum"
            ],
            "name": "queue",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Execute a previously queued proposal.",
                "This will clear the proposal and unlock the governance tokens.",
                "Said tokens can then be withdrawn and used to vote/downvote other proposals."
            ],
            "name": "execute",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Cancel a proposed action. This can be done:",
                "- by the proposer, at any time",
                "- by anyone, if the proposal was defeated"
            ],
            "name": "cancel",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": []
        },
        {
            "name": "getProposalStatus",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "GovernanceProposalStatus"
                }
            ]
        },
        {
            "name": "getProposer",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "optional<Address>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getProposalDescription",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "optional<bytes>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getProposalActions",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "variadic<multi<u64,Address,bytes,List<bytes>>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getProposalVotes",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "ProposalVotes"
                }
            ]
        },
        {
            "name": "getTotalVotes",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalDownvotes",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "changeQuorum",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_value",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeMinTokenBalanceForProposing",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_value",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeVotingDelayInBlocks",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_value",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeVotingPeriodInBlocks",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_value",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "changeLockTimeAfterVotingEndsInBlocks",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_value",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "getGovernanceTokenId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getQuorum",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getMinFeeForPropose",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getMinTokenBalanceForProposing",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getVotingDelayInBlocks",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getVotingPeriodInBlocks",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getLockTimeAfterVotingEndsInBlocks",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "pause",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unpause",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "isPaused",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "stake",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unstake",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "unstake_amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "voteSlashMember",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "member_to_slash",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "cancelVoteSlashMember",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "member_to_slash",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "slashMember",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "member_to_slash",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "issueMergedToken",
            "onlyOwner": true,
            "mutability": "mutable",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [
                {
                    "name": "token_display_name",
                    "type": "bytes"
                },
                {
                    "name": "token_ticker",
                    "type": "bytes"
                }
            ],
            "outputs": []
        },
        {
            "name": "addMergeableTokensToWhitelist",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "tokens",
                    "type": "variadic<TokenIdentifier>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "removeMergeableTokensFromWhitelist",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "tokens",
                    "type": "variadic<TokenIdentifier>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "getMergedTokenId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getMergeableTokensWhitelist",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<TokenIdentifier>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "isAdmin",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "addAdmin",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "removeAdmin",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "getAdmins",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<Address>",
                    "multi_result": true
                }
            ]
        }
    ],
    "events": [
        {
            "identifier": "eventInModule",
            "inputs": [
                {
                    "name": "arg",
                    "type": "u32",
                    "indexed": true
                }
            ]
        },
        {
            "identifier": "proposalCreated",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "proposer",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "start_block",
                    "type": "u64",
                    "indexed": true
                },
                {
                    "name": "proposal",
                    "type": "GovernanceProposal"
                }
            ]
        },
        {
            "identifier": "upVoteCast",
            "inputs": [
                {
                    "name": "up_voter",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "nr_votes",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "downVoteCast",
            "inputs": [
                {
                    "name": "down_voter",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "nr_downvotes",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "downVetoVoteCast",
            "inputs": [
                {
                    "name": "down_veto_voter",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "nr_downvotes",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "abstainVoteCast",
            "inputs": [
                {
                    "name": "abstain_voter",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "nr_downvotes",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "proposalCanceled",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                }
            ]
        },
        {
            "identifier": "proposalQueued",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "queued_block",
                    "type": "u64",
                    "indexed": true
                }
            ]
        },
        {
            "identifier": "proposalExecuted",
            "inputs": [
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                }
            ]
        },
        {
            "identifier": "userDeposit",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "payment",
                    "type": "EsdtTokenPayment"
                }
            ]
        },
        {
            "identifier": "userClaimDepositedTokens",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "proposal_id",
                    "type": "u32",
                    "indexed": true
                },
                {
                    "name": "payment",
                    "type": "EsdtTokenPayment"
                }
            ]
        }
    ],
    "esdtAttributes": [
        {
            "ticker": "INMODULE",
            "type": "u32"
        },
        {
            "ticker": "TICKER1",
            "type": "BigUint"
        },
        {
            "ticker": "TICKER2",
            "type": "bytes"
        }
    ],
    "hasCallback": true,
    "types": {
        "EsdtTokenPayment": {
            "type": "struct",
            "fields": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ]
        },
        "EsdtTokenType": {
            "type": "enum",
            "variants": [
                {
                    "name": "Fungible",
                    "discriminant": 0
                },
                {
                    "name": "NonFungible",
                    "discriminant": 1
                },
                {
                    "name": "SemiFungible",
                    "discriminant": 2
                },
                {
                    "name": "Meta",
                    "discriminant": 3
                },
                {
                    "name": "Invalid",
                    "discriminant": 4
                }
            ]
        },
        "FeeEntry": {
            "type": "struct",
            "fields": [
                {
                    "name": "depositor_addr",
                    "type": "Address"
                },
                {
                    "name": "tokens",
                    "type": "EsdtTokenPayment"
                }
            ]
        },
        "GovernanceAction": {
            "type": "struct",
            "fields": [
                {
                    "name": "gas_limit",
                    "type": "u64"
                },
                {
                    "name": "dest_address",
                    "type": "Address"
                },
                {
                    "name": "function_name",
                    "type": "bytes"
                },
                {
                    "name": "arguments",
                    "type": "List<bytes>"
                }
            ]
        },
        "GovernanceProposal": {
            "type": "struct",
            "fields": [
                {
                    "name": "proposer",
                    "type": "Address"
                },
                {
                    "name": "actions",
                    "type": "List<GovernanceAction>"
                },
                {
                    "name": "description",
                    "type": "bytes"
                },
                {
                    "name": "fees",
                    "type": "ProposalFees"
                }
            ]
        },
        "GovernanceProposalStatus": {
            "type": "enum",
            "variants": [
                {
                    "name": "None",
                    "discriminant": 0
                },
                {
                    "name": "Pending",
                    "discriminant": 1
                },
                {
                    "name": "Active",
                    "discriminant": 2
                },
                {
                    "name": "Defeated",
                    "discriminant": 3
                },
                {
                    "name": "Succeeded",
                    "discriminant": 4
                },
                {
                    "name": "Queued",
                    "discriminant": 5
                },
                {
                    "name": "WaitingForFees",
                    "discriminant": 6
                }
            ]
        },
        "OperationCompletionStatus": {
            "type": "explicit-enum",
            "variants": [
                {
                    "docs": [
                        "indicates that operation was completed"
                    ],
                    "name": "completed"
                },
                {
                    "docs": [
                        "indicates that operation was interrupted prematurely, due to low gas"
                    ],
                    "name": "interrupted"
                }
            ]
        },
        "ProposalFees": {
            "type": "struct",
            "fields": [
                {
                    "name": "total_amount",
                    "type": "BigUint"
                },
                {
                    "name": "entries",
                    "type": "List<FeeEntry>"
                }
            ]
        },
        "ProposalVotes": {
            "type": "struct",
            "fields": [
                {
                    "name": "up_votes",
                    "type": "BigUint"
                },
                {
                    "name": "down_votes",
                    "type": "BigUint"
                },
                {
                    "name": "down_veto_votes",
                    "type": "BigUint"
                },
                {
                    "name": "abstain_votes",
                    "type": "BigUint"
                }
            ]
        },
        "VoteType": {
            "type": "enum",
            "variants": [
                {
                    "name": "UpVote",
                    "discriminant": 0
                },
                {
                    "name": "DownVote",
                    "discriminant": 1
                },
                {
                    "name": "DownVetoVote",
                    "discriminant": 2
                },
                {
                    "name": "AbstainVote",
                    "discriminant": 3
                }
            ]
        }
    }
}
