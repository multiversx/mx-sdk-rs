{
    "buildInfo": {
        "rustc": {
            "version": "x.x.x-nightly",
            "commitHash": "<commit hash here>",
            "commitDate": "<commit date here>",
            "channel": "Channel",
            "short": "rustc <version> (<short hash> <date>)"
        },
        "contractCrate": {
            "name": "abi-tester",
            "version": "0.0.0",
            "gitVersion": "<git version here>"
        },
        "framework": {
            "name": "multiversx-sc",
            "version": "0.45.2"
        }
    },
    "docs": [
        "Contract whose sole purpose is to verify that",
        "the ABI generation framework works sa expected.",
        "",
        "Note: any change in this contract must also be reflected in `abi_test_expected.abi.json`,",
        "including Rust docs."
    ],
    "name": "AbiTester",
    "constructor": {
        "docs": [
            "The external view init prepares a contract that looks in another contract's storage.",
            "It takes a single argument, the other contract's address",
            "You won't find this constructors' definition in the contract, it gets injected automatically by the framework. See `multiversx_sc::external_view_contract`."
        ],
        "inputs": [
            {
                "name": "target_contract_address",
                "type": "Address"
            }
        ],
        "outputs": []
    },
    "endpoints": [
        {
            "name": "external_view",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [],
            "labels": [
                "test-external-view"
            ]
        },
        {
            "name": "payable_any_token",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "label_a",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [],
            "labels": [
                "label1"
            ]
        }
    ],
    "events": [
        {
            "identifier": "payable-event",
            "inputs": [
                {
                    "name": "token",
                    "type": "TokenIdentifier",
                    "indexed": true
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "address-h256-event",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "h256",
                    "type": "H256",
                    "indexed": true
                }
            ]
        }
    ],
    "esdtAttributes": [
        {
            "ticker": "TICKER1",
            "type": "BigUint"
        },
        {
            "ticker": "TICKER2",
            "type": "bytes"
        },
        {
            "ticker": "TICKER3",
            "type": "u32"
        },
        {
            "ticker": "STRUCT1",
            "type": "AbiEnum"
        },
        {
            "ticker": "STRUCT2",
            "type": "AbiManagedType"
        },
        {
            "ticker": "OnlyInEsdt",
            "type": "OnlyShowsUpInEsdtAttr"
        }
    ],
    "hasCallback": false,
    "types": {
        "AbiEnum": {
            "type": "enum",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "variants": [
                {
                    "name": "Nothing",
                    "discriminant": 0
                },
                {
                    "name": "Something",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "0",
                            "type": "i32"
                        }
                    ]
                },
                {
                    "name": "SomethingMore",
                    "discriminant": 2,
                    "fields": [
                        {
                            "name": "0",
                            "type": "u8"
                        },
                        {
                            "name": "1",
                            "type": "OnlyShowsUpAsNested08"
                        }
                    ]
                },
                {
                    "name": "SomeStruct",
                    "discriminant": 3,
                    "fields": [
                        {
                            "name": "a",
                            "type": "u16"
                        },
                        {
                            "name": "b",
                            "type": "OnlyShowsUpAsNested09"
                        }
                    ]
                }
            ]
        },
        "AbiManagedType": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "name": "big_uint",
                    "type": "BigUint"
                },
                {
                    "name": "integer",
                    "type": "i32"
                },
                {
                    "name": "managed_buffer",
                    "type": "bytes"
                }
            ]
        },
        "AbiManagedVecItem": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "name": "value1",
                    "type": "u32"
                },
                {
                    "name": "value2",
                    "type": "u32"
                }
            ]
        },
        "AbiTestType": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "docs": [
                        "This type should only appear here."
                    ],
                    "name": "nested",
                    "type": "OnlyShowsUpAsNested01"
                },
                {
                    "docs": [
                        "Tests that recursive types will not send the ABI generator into an infinite loop."
                    ],
                    "name": "next",
                    "type": "Option<AbiTestType>"
                },
                {
                    "docs": [
                        "Tests that tuples tell the ABI of their component types even if they appear nowhere else.",
                        "Also, just like above, recursive types need to work even when nested into a tuple."
                    ],
                    "name": "tuple_madness",
                    "type": "tuple<OnlyShowsUpAsNested02,Option<AbiTestType>>"
                }
            ]
        },
        "EsdtLocalRole": {
            "type": "enum",
            "variants": [
                {
                    "name": "None",
                    "discriminant": 0
                },
                {
                    "name": "Mint",
                    "discriminant": 1
                },
                {
                    "name": "Burn",
                    "discriminant": 2
                },
                {
                    "name": "NftCreate",
                    "discriminant": 3
                },
                {
                    "name": "NftAddQuantity",
                    "discriminant": 4
                },
                {
                    "name": "NftBurn",
                    "discriminant": 5
                },
                {
                    "name": "NftAddUri",
                    "discriminant": 6
                },
                {
                    "name": "NftUpdateAttributes",
                    "discriminant": 7
                },
                {
                    "name": "Transfer",
                    "discriminant": 8
                }
            ]
        },
        "EsdtTokenData": {
            "type": "struct",
            "fields": [
                {
                    "name": "token_type",
                    "type": "EsdtTokenType"
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                },
                {
                    "name": "frozen",
                    "type": "bool"
                },
                {
                    "name": "hash",
                    "type": "bytes"
                },
                {
                    "name": "name",
                    "type": "bytes"
                },
                {
                    "name": "attributes",
                    "type": "bytes"
                },
                {
                    "name": "creator",
                    "type": "Address"
                },
                {
                    "name": "royalties",
                    "type": "BigUint"
                },
                {
                    "name": "uris",
                    "type": "List<bytes>"
                }
            ]
        },
        "EsdtTokenPayment": {
            "type": "struct",
            "fields": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ]
        },
        "EsdtTokenType": {
            "type": "enum",
            "variants": [
                {
                    "name": "Fungible",
                    "discriminant": 0
                },
                {
                    "name": "NonFungible",
                    "discriminant": 1
                },
                {
                    "name": "SemiFungible",
                    "discriminant": 2
                },
                {
                    "name": "Meta",
                    "discriminant": 3
                },
                {
                    "name": "Invalid",
                    "discriminant": 4
                }
            ]
        },
        "OnlyShowsUpAsNested01": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested02": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "array0<u8>"
                }
            ]
        },
        "OnlyShowsUpAsNested03": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested04": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested05": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested06": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested07": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested08": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested09": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested10": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInArray": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInArrayVec": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInBox": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInBoxedSlice": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInOption": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInRef": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInSingleValueMapper": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInSlice": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInVec": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpInConstructor": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpInEsdtAttr": {
            "type": "struct",
            "fields": [
                {
                    "name": "field",
                    "type": "OnlyShowsUpAsNested10"
                }
            ]
        }
    }
}
