{
    "docs": [
        "Contract whose sole purpose is to verify that",
        "the ABI generation framework works sa expected.",
        "",
        "Note: any change in this contract must also be reflected in `abi_test_expected.abi.json`,",
        "including Rust docs."
    ],
    "name": "AbiTester",
    "endpoints": [
        {
            "name": "echo_abi_test_type",
            "inputs": [
                {
                    "name": "att",
                    "type": "AbiTestType"
                }
            ],
            "outputs": [
                {
                    "name": "single output",
                    "type": "AbiTestType"
                }
            ]
        },
        {
            "name": "echo_enum",
            "inputs": [
                {
                    "name": "e",
                    "type": "AbiEnum"
                }
            ],
            "outputs": [
                {
                    "type": "AbiEnum"
                }
            ]
        },
        {
            "name": "multi_result_3",
            "inputs": [],
            "outputs": [
                {
                    "name": "multi-result-1",
                    "type": "i32"
                },
                {
                    "name": "multi-result-2",
                    "type": "[u8; 3]"
                },
                {
                    "name": "multi-result-3",
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "multi_result_4",
            "inputs": [],
            "outputs": [
                {
                    "name": "multi-too-few-1",
                    "type": "i32"
                },
                {
                    "name": "multi-too-few-2",
                    "type": "[u8; 3]"
                },
                {
                    "type": "bytes"
                },
                {
                    "type": "OnlyShowsUpAsNested03"
                }
            ]
        },
        {
            "name": "var_args",
            "inputs": [
                {
                    "name": "_simple_arg",
                    "type": "u32"
                },
                {
                    "name": "_var_args",
                    "type": "VarArgs<MultiArg<OnlyShowsUpAsNested04,i32,>>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "multi_result_vec",
            "inputs": [],
            "outputs": [
                {
                    "type": "MultiResultVec<OnlyShowsUpAsNested05>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "optional_arg",
            "inputs": [
                {
                    "name": "_simple_arg",
                    "type": "u32"
                },
                {
                    "name": "_opt_args",
                    "type": "OptionalArg<OnlyShowsUpAsNested06>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "optional_result",
            "inputs": [],
            "outputs": [
                {
                    "type": "OptionalResult<OnlyShowsUpAsNested07>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "address_vs_h256",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "h256",
                    "type": "H256"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                },
                {
                    "type": "H256"
                }
            ]
        },
        {
            "name": "payable_egld",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "payable_some_token",
            "payableInTokens": [
                "TOKEN-FOR-ABI"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "payable_any_token",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        }
    ],
    "types": {
        "AbiEnum": {
            "type": "enum",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "variants": [
                {
                    "name": "Nothing",
                    "discriminant": 0
                },
                {
                    "name": "Something",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "0",
                            "type": "i32"
                        }
                    ]
                },
                {
                    "name": "SomethingMore",
                    "discriminant": 2,
                    "fields": [
                        {
                            "name": "0",
                            "type": "u8"
                        },
                        {
                            "name": "1",
                            "type": "OnlyShowsUpAsNested08"
                        }
                    ]
                },
                {
                    "name": "SomeStruct",
                    "discriminant": 3,
                    "fields": [
                        {
                            "name": "a",
                            "type": "u16"
                        },
                        {
                            "name": "b",
                            "type": "OnlyShowsUpAsNested09"
                        }
                    ]
                }
            ]
        },
        "AbiTestType": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "docs": [
                        "This type should only appear here."
                    ],
                    "name": "nested",
                    "type": "OnlyShowsUpAsNested01"
                },
                {
                    "docs": [
                        "Tests that recursive types will not send the ABI generator into an infinite loop."
                    ],
                    "name": "next",
                    "type": "Option<AbiTestType>"
                },
                {
                    "docs": [
                        "Tests that tuples tell the ABI of their component types even if they appear nowhere else.",
                        "Also, just like above, recursive types need to work even when nested into a tuple."
                    ],
                    "name": "tuple_madness",
                    "type": "(OnlyShowsUpAsNested02,Option<AbiTestType>)"
                }
            ]
        },
        "OnlyShowsUpAsNested01": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested02": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested03": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested04": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested05": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested06": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested07": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested08": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpAsNested09": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        }
    }
}
