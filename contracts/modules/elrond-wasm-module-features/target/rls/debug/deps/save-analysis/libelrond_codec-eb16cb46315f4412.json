{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1","program":"/home/andreim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","elrond_codec","--edition=2018","/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=eb16cb46315f4412","-C","extra-filename=-eb16cb46315f4412","--out-dir","/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps","-L","dependency=/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps","--extern","arrayvec=/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps/libarrayvec-5cb8bd976b47645f.rmeta","--extern","wee_alloc=/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps/libwee_alloc-eade9b8c170f1de8.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/andreim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps/libelrond_codec-eb16cb46315f4412.rmeta"},"prelude":{"crate_id":{"name":"elrond_codec","disambiguator":[17780080307500969590,9205692393108382778]},"crate_root":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src","external_crates":[{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","num":5,"id":{"name":"arrayvec","disambiguator":[3126515757940549932,66544238379293939]}}],"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":0,"byte_end":7308,"line_start":1,"line_end":257,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":116,"byte_end":117,"line_start":10,"line_end":10,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Encode","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":116,"byte_end":117,"line_start":10,"line_end":10,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Decode","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3582},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":160,"byte_end":171,"line_start":12,"line_end":12,"column_start":21,"column_end":32},"alias_span":null,"name":"EncodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3600},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":173,"byte_end":184,"line_start":12,"line_end":12,"column_start":34,"column_end":45},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":0,"byte_end":7308,"line_start":1,"line_end":257,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":81},{"krate":0,"index":139},{"krate":0,"index":145},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7437,"byte_end":7443,"line_start":6,"line_end":6,"column_start":11,"column_end":17},"name":"Output","qualname":"::codec_ser::Output","value":"Output","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11}],"decl_id":null,"docs":" Trait that allows writing of data.\n","sig":null,"attributes":[{"value":"/ Trait that allows writing of data.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7388,"byte_end":7426,"line_start":5,"line_end":5,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7476,"byte_end":7481,"line_start":8,"line_end":8,"column_start":5,"column_end":10},"name":"write","qualname":"::codec_ser::Output::write","value":"pub fn write(&mut Self, &[u8])","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Write to the output.\n","sig":null,"attributes":[{"value":"/ Write to the output.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7447,"byte_end":7471,"line_start":7,"line_end":7,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7553,"byte_end":7562,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"name":"push_byte","qualname":"::codec_ser::Output::push_byte","value":"pub fn push_byte(&mut Self, u8)","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Write a single byte to the output.\n","sig":null,"attributes":[{"value":"/ Write a single byte to the output.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7510,"byte_end":7548,"line_start":10,"line_end":10,"column_start":2,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7989,"byte_end":7995,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"Encode","qualname":"::codec_ser::Encode","value":"Encode: Sized","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":" Trait that allows zero-copy write of value-references to slices in LE format.","sig":null,"attributes":[{"value":"/ Trait that allows zero-copy write of value-references to slices in LE format.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7716,"byte_end":7797,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7798,"byte_end":7801,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Implementations should override `using_top_encoded` for value types and `dep_encode_to` and `size_hint` for allocating types.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7802,"byte_end":7931,"line_start":24,"line_end":24,"column_start":1,"column_end":130}},{"value":"/ Wrapper types should override all methods.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7932,"byte_end":7978,"line_start":25,"line_end":25,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8143,"byte_end":8152,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"TYPE_INFO","qualname":"::codec_ser::Encode::TYPE_INFO","value":"TypeInfo","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8314,"byte_end":8327,"line_start":34,"line_end":34,"column_start":5,"column_end":18},"name":"dep_encode_to","qualname":"::codec_ser::Encode::dep_encode_to","value":"pub fn dep_encode_to<O: Output>(&Self, &mut O) -> Result<(), EncodeError>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Encode to output, using the format of an object nested inside another structure.\n Does not provide compact version.\n","sig":null,"attributes":[{"value":"/ Encode to output, using the format of an object nested inside another structure.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8186,"byte_end":8270,"line_start":32,"line_end":32,"column_start":2,"column_end":86}},{"value":"/ Does not provide compact version.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8272,"byte_end":8309,"line_start":33,"line_end":33,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8561,"byte_end":8571,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"name":"top_encode","qualname":"::codec_ser::Encode::top_encode","value":"pub fn top_encode(&Self) -> Result<Vec<u8>, EncodeError>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Convert self to an owned vector.\n Allowed to provide compact version.\n Do not call for nested objects.\n","sig":null,"attributes":[{"value":"/ Convert self to an owned vector.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8442,"byte_end":8478,"line_start":38,"line_end":38,"column_start":2,"column_end":38}},{"value":"/ Allowed to provide compact version.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8480,"byte_end":8519,"line_start":39,"line_end":39,"column_start":2,"column_end":41}},{"value":"/ Do not call for nested objects.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8521,"byte_end":8556,"line_start":40,"line_end":40,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8861,"byte_end":8878,"line_start":50,"line_end":50,"column_start":5,"column_end":22},"name":"using_top_encoded","qualname":"::codec_ser::Encode::using_top_encoded","value":"pub fn using_top_encoded<F: FnOnce(&[u8]) -> ()>(&Self, F)\n-> Result<(), EncodeError>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Convert self to a slice and then invoke the given closure with it.\n Allowed to provide compact version.\n Do not call for nested objects.\n","sig":null,"attributes":[{"value":"/ Convert self to a slice and then invoke the given closure with it.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8708,"byte_end":8778,"line_start":47,"line_end":47,"column_start":2,"column_end":72}},{"value":"/ Allowed to provide compact version.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8780,"byte_end":8819,"line_start":48,"line_end":48,"column_start":2,"column_end":41}},{"value":"/ Do not call for nested objects.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":8821,"byte_end":8856,"line_start":49,"line_end":49,"column_start":2,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":12098,"byte_end":12118,"line_start":179,"line_end":179,"column_start":8,"column_end":28},"name":"using_encoded_number","qualname":"::codec_ser::using_encoded_number","value":"pub fn using_encoded_number<F: FnOnce(&[u8]) -> ()>(u64, usize, bool, bool, F)","parent":null,"children":[],"decl_id":null,"docs":" Adds number to output buffer.\n No argument generics here, because we want the executable binary as small as possible.\n Smaller types need to be converted to u64 before using this function.\n TODO: there might be a quicker version of this using transmute + reverse bytes.\n","sig":null,"attributes":[{"value":"/ Adds number to output buffer.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":11808,"byte_end":11841,"line_start":175,"line_end":175,"column_start":1,"column_end":34}},{"value":"/ No argument generics here, because we want the executable binary as small as possible.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":11842,"byte_end":11932,"line_start":176,"line_end":176,"column_start":1,"column_end":91}},{"value":"/ Smaller types need to be converted to u64 before using this function.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":11933,"byte_end":12006,"line_start":177,"line_end":177,"column_start":1,"column_end":74}},{"value":"/ TODO: there might be a quicker version of this using transmute + reverse bytes.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":12007,"byte_end":12090,"line_start":178,"line_end":178,"column_start":1,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":86},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":20996,"byte_end":21001,"line_start":7,"line_end":7,"column_start":11,"column_end":16},"name":"Input","qualname":"::codec_de::Input","value":"Input","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Trait that allows reading of data into a slice.\n","sig":null,"attributes":[{"value":"/ Trait that allows reading of data into a slice.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":20934,"byte_end":20985,"line_start":6,"line_end":6,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21419,"byte_end":21432,"line_start":14,"line_end":14,"column_start":8,"column_end":21},"name":"remaining_len","qualname":"::codec_de::Input::remaining_len","value":"pub fn remaining_len(&mut Self) -> usize","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Should return the remaining length of the input data. If no information about the input\n length is available, `None` should be returned.","sig":null,"attributes":[{"value":"/ Should return the remaining length of the input data. If no information about the input","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21005,"byte_end":21096,"line_start":8,"line_end":8,"column_start":2,"column_end":93}},{"value":"/ length is available, `None` should be returned.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21098,"byte_end":21149,"line_start":9,"line_end":9,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21151,"byte_end":21154,"line_start":10,"line_end":10,"column_start":2,"column_end":5}},{"value":"/ The length is used to constrain the preallocation while decoding. Returning a garbage","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21156,"byte_end":21245,"line_start":11,"line_end":11,"column_start":2,"column_end":91}},{"value":"/ length can open the doors for a denial of service attack to your application.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21247,"byte_end":21328,"line_start":12,"line_end":12,"column_start":2,"column_end":83}},{"value":"/ Otherwise, returning `None` can decrease the performance of your application.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21330,"byte_end":21411,"line_start":13,"line_end":13,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21466,"byte_end":21471,"line_start":16,"line_end":16,"column_start":8,"column_end":13},"name":"empty","qualname":"::codec_de::Input::empty","value":"pub fn empty(&mut Self) -> bool","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21611,"byte_end":21620,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"read_into","qualname":"::codec_de::Input::read_into","value":"pub fn read_into(&mut Self, &mut [u8]) -> Result<(), DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Read the exact number of bytes required to fill the given buffer.\n","sig":null,"attributes":[{"value":"/ Read the exact number of bytes required to fill the given buffer.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21534,"byte_end":21603,"line_start":20,"line_end":20,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21722,"byte_end":21731,"line_start":24,"line_end":24,"column_start":5,"column_end":14},"name":"read_byte","qualname":"::codec_de::Input::read_byte","value":"pub fn read_byte(&mut Self) -> Result<u8, DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Read a single byte from the input.\n","sig":null,"attributes":[{"value":"/ Read a single byte from the input.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21679,"byte_end":21717,"line_start":23,"line_end":23,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21926,"byte_end":21936,"line_start":31,"line_end":31,"column_start":5,"column_end":15},"name":"read_slice","qualname":"::codec_de::Input::read_slice","value":"pub fn read_slice(&mut Self, usize) -> Result<&[u8], DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Read the exact number of bytes required to fill the given buffer.\n","sig":null,"attributes":[{"value":"/ Read the exact number of bytes required to fill the given buffer.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":21852,"byte_end":21921,"line_start":30,"line_end":30,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":22006,"byte_end":22011,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"flush","qualname":"::codec_de::Input::flush","value":"pub fn flush(&mut Self) -> Result<&[u8], DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":22905,"byte_end":22911,"line_start":70,"line_end":70,"column_start":11,"column_end":17},"name":"Decode","qualname":"::codec_de::Decode","value":"Decode: Sized","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103}],"decl_id":null,"docs":" Trait that allows zero-copy read of value-references from slices in LE format.\n","sig":null,"attributes":[{"value":"/ Trait that allows zero-copy read of value-references from slices in LE format.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":22812,"byte_end":22894,"line_start":69,"line_end":69,"column_start":1,"column_end":83}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23059,"byte_end":23068,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"TYPE_INFO","qualname":"::codec_de::Decode::TYPE_INFO","value":"TypeInfo","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23162,"byte_end":23172,"line_start":77,"line_end":77,"column_start":5,"column_end":15},"name":"top_decode","qualname":"::codec_de::Decode::top_decode","value":"pub fn top_decode<I: Input>(&mut I) -> Result<Self, DecodeError>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Attempt to deserialise the value from input.\n","sig":null,"attributes":[{"value":"/ Attempt to deserialise the value from input.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23109,"byte_end":23157,"line_start":76,"line_end":76,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23646,"byte_end":23656,"line_start":88,"line_end":88,"column_start":8,"column_end":18},"name":"dep_decode","qualname":"::codec_de::Decode::dep_decode","value":"pub fn dep_decode<I: Input>(&mut I) -> Result<Self, DecodeError>","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Attempt to deserialise the value from input,\n using the format of an object nested inside another structure.\n In case of success returns the deserialized value and the number of bytes consumed during the operation.\n","sig":null,"attributes":[{"value":"/ Attempt to deserialise the value from input,","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23406,"byte_end":23454,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/ using the format of an object nested inside another structure.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23459,"byte_end":23525,"line_start":86,"line_end":86,"column_start":5,"column_end":71}},{"value":"/ In case of success returns the deserialized value and the number of bytes consumed during the operation.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23530,"byte_end":23638,"line_start":87,"line_end":87,"column_start":5,"column_end":113}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23852,"byte_end":23874,"line_start":94,"line_end":94,"column_start":8,"column_end":30},"name":"decode_from_byte_slice","qualname":"::codec_de::decode_from_byte_slice","value":"pub fn decode_from_byte_slice<D: Decode>(&[u8]) -> Result<D, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Convenience method, to avoid having to specify type when calling `top_decode`.\n Especially useful in the macros.\n","sig":null,"attributes":[{"value":"/ Convenience method, to avoid having to specify type when calling `top_decode`.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23715,"byte_end":23797,"line_start":91,"line_end":91,"column_start":1,"column_end":83}},{"value":"/ Especially useful in the macros.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23798,"byte_end":23834,"line_start":92,"line_end":92,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":23835,"byte_end":23844,"line_start":93,"line_end":93,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":26121,"byte_end":26136,"line_start":165,"line_end":165,"column_start":8,"column_end":23},"name":"bytes_to_number","qualname":"::codec_de::bytes_to_number","value":"pub fn bytes_to_number(&[u8], bool) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Handles both signed and unsigned of any length.\n No generics here, because we want the executable binary as small as possible.\n","sig":null,"attributes":[{"value":"/ Handles both signed and unsigned of any length.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":25980,"byte_end":26031,"line_start":163,"line_end":163,"column_start":1,"column_end":52}},{"value":"/ No generics here, because we want the executable binary as small as possible.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":26032,"byte_end":26113,"line_start":164,"line_end":164,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3583},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34354,"byte_end":34374,"line_start":5,"line_end":5,"column_start":5,"column_end":25},"name":"UnsupportedOperation","qualname":"::codec_err::EncodeError::UnsupportedOperation","value":"EncodeError::UnsupportedOperation","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3585},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34380,"byte_end":34386,"line_start":6,"line_end":6,"column_start":5,"column_end":11},"name":"Static","qualname":"::codec_err::EncodeError::Static","value":"EncodeError::Static(&'static [u8])","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3588},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34407,"byte_end":34414,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::codec_err::EncodeError::Dynamic","value":"EncodeError::Dynamic(Vec<u8>)","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3582},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34336,"byte_end":34347,"line_start":4,"line_end":4,"column_start":10,"column_end":21},"name":"EncodeError","qualname":"::codec_err::EncodeError","value":"pub enum EncodeError {\n    UnsupportedOperation,\n    Static(&'static [u8]),\n    Dynamic(Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":3583},{"krate":0,"index":3585},{"krate":0,"index":3588}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34458,"byte_end":34471,"line_start":11,"line_end":11,"column_start":12,"column_end":25},"name":"message_bytes","qualname":"<EncodeError>::message_bytes","value":"pub fn message_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3601},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34771,"byte_end":34784,"line_start":22,"line_end":22,"column_start":5,"column_end":18},"name":"InputTooShort","qualname":"::codec_err::DecodeError::InputTooShort","value":"DecodeError::InputTooShort","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3603},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34790,"byte_end":34802,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"name":"InputTooLong","qualname":"::codec_err::DecodeError::InputTooLong","value":"DecodeError::InputTooLong","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3605},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34808,"byte_end":34820,"line_start":24,"line_end":24,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::codec_err::DecodeError::InvalidValue","value":"DecodeError::InvalidValue","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3607},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34826,"byte_end":34846,"line_start":25,"line_end":25,"column_start":5,"column_end":25},"name":"UnsupportedOperation","qualname":"::codec_err::DecodeError::UnsupportedOperation","value":"DecodeError::UnsupportedOperation","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3609},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34852,"byte_end":34866,"line_start":26,"line_end":26,"column_start":5,"column_end":19},"name":"ArrayDecodeErr","qualname":"::codec_err::DecodeError::ArrayDecodeErr","value":"DecodeError::ArrayDecodeErr","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3611},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34872,"byte_end":34878,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Static","qualname":"::codec_err::DecodeError::Static","value":"DecodeError::Static(&'static [u8])","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3614},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34899,"byte_end":34906,"line_start":28,"line_end":28,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::codec_err::DecodeError::Dynamic","value":"DecodeError::Dynamic(Vec<u8>)","parent":{"krate":0,"index":3600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3600},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34753,"byte_end":34764,"line_start":21,"line_end":21,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::codec_err::DecodeError","value":"pub enum DecodeError {\n    InputTooShort,\n    InputTooLong,\n    InvalidValue,\n    UnsupportedOperation,\n    ArrayDecodeErr,\n    Static(&'static [u8]),\n    Dynamic(Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":3601},{"krate":0,"index":3603},{"krate":0,"index":3605},{"krate":0,"index":3607},{"krate":0,"index":3609},{"krate":0,"index":3611},{"krate":0,"index":3614}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34950,"byte_end":34963,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"message_bytes","qualname":"<DecodeError>::message_bytes","value":"pub fn message_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":145},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/test_util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_util","qualname":"::test_util","value":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/test_util.rs","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":3642},{"krate":0,"index":148}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":148},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/test_util.rs","byte_start":35518,"byte_end":35530,"line_start":4,"line_end":4,"column_start":8,"column_end":20},"name":"ser_deser_ok","qualname":"::test_util::ser_deser_ok","value":"pub fn ser_deser_ok<V>(V, &[u8]) where V: Encode + Decode + PartialEq +\nDebug + 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":156},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":456,"byte_end":463,"line_start":20,"line_end":20,"column_start":2,"column_end":9},"name":"Unknown","qualname":"::TypeInfo::Unknown","value":"TypeInfo::Unknown","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.\n","sig":null,"attributes":[{"value":"/ Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":352,"byte_end":454,"line_start":19,"line_end":19,"column_start":2,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":158},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":469,"byte_end":471,"line_start":21,"line_end":21,"column_start":5,"column_end":7},"name":"U8","qualname":"::TypeInfo::U8","value":"TypeInfo::U8","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":477,"byte_end":479,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"I8","qualname":"::TypeInfo::I8","value":"TypeInfo::I8","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":162},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":485,"byte_end":488,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"U16","qualname":"::TypeInfo::U16","value":"TypeInfo::U16","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":164},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":494,"byte_end":497,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"I16","qualname":"::TypeInfo::I16","value":"TypeInfo::I16","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":503,"byte_end":506,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"U32","qualname":"::TypeInfo::U32","value":"TypeInfo::U32","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":168},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":512,"byte_end":515,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"I32","qualname":"::TypeInfo::I32","value":"TypeInfo::I32","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":170},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":521,"byte_end":524,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"U64","qualname":"::TypeInfo::U64","value":"TypeInfo::U64","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":172},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":530,"byte_end":533,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"I64","qualname":"::TypeInfo::I64","value":"TypeInfo::I64","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":174},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":539,"byte_end":543,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bool","qualname":"::TypeInfo::Bool","value":"TypeInfo::Bool","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":176},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":549,"byte_end":556,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"BigUint","qualname":"::TypeInfo::BigUint","value":"TypeInfo::BigUint","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":562,"byte_end":568,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"BigInt","qualname":"::TypeInfo::BigInt","value":"TypeInfo::BigInt","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":180},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":574,"byte_end":578,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"name":"Unit","qualname":"::TypeInfo::Unit","value":"TypeInfo::Unit","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":155},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":340,"byte_end":348,"line_start":18,"line_end":18,"column_start":10,"column_end":18},"name":"TypeInfo","qualname":"::TypeInfo","value":"pub enum TypeInfo {\n\n    /// Default value of [`Encode::TYPE_INFO`] to not require implementors to set this value in the trait.\n    Unknown,\n    U8,\n    I8,\n    U16,\n    I16,\n    U32,\n    I32,\n    U64,\n    I64,\n    Bool,\n    BigUint,\n    BigInt,\n    Unit,\n}","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180}],"decl_id":null,"docs":" !INTERNAL USE ONLY!","sig":null,"attributes":[{"value":"/ !INTERNAL USE ONLY!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":188,"byte_end":211,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":212,"byte_end":215,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This enum provides type information to optimize encoding/decoding by doing fake specialization.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":216,"byte_end":315,"line_start":16,"line_end":16,"column_start":1,"column_end":100}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7631,"byte_end":7634,"line_start":16,"line_end":16,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":11528,"byte_end":11531,"line_start":162,"line_end":162,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":14429,"byte_end":14435,"line_start":260,"line_end":260,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":24676,"byte_end":24679,"line_start":124,"line_end":124,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":28613,"byte_end":28619,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34433,"byte_end":34444,"line_start":10,"line_end":10,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34925,"byte_end":34936,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/lib.rs","byte_start":85,"byte_end":94,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":145}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7631,"byte_end":7634,"line_start":16,"line_end":16,"column_start":17,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":4,"index":4228},"to":{"krate":0,"index":9}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":7997,"byte_end":8002,"line_start":26,"line_end":26,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1927},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":11528,"byte_end":11531,"line_start":162,"line_end":162,"column_start":28,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":4,"index":4228},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_ser.rs","byte_start":14429,"byte_end":14435,"line_start":260,"line_end":260,"column_start":28,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":29967},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":22913,"byte_end":22918,"line_start":70,"line_end":70,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1927},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":24676,"byte_end":24679,"line_start":124,"line_end":124,"column_start":28,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":4,"index":4228},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_de.rs","byte_start":28613,"byte_end":28619,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":29967},"to":{"krate":0,"index":99}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34433,"byte_end":34444,"line_start":10,"line_end":10,"column_start":6,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/elrond-codec-0.1.1/src/codec_err.rs","byte_start":34925,"byte_end":34936,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3600},"to":{"krate":4294967295,"index":4294967295}}]}