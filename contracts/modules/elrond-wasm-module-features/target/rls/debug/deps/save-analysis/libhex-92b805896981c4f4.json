{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2","program":"/home/andreim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hex","--edition=2018","/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=92b805896981c4f4","-C","extra-filename=-92b805896981c4f4","--out-dir","/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps","-L","dependency=/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/andreim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/andreim/elrond/newsc/sc-delegation-rs/features-module/target/rls/debug/deps/libhex-92b805896981c4f4.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[3495307822927400015,15255813393867306628]},"crate_root":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src","external_crates":[{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}}],"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":411,"byte_end":13961,"line_start":9,"line_end":485,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1208,"byte_end":1220,"line_start":38,"line_end":38,"column_start":23,"column_end":35},"alias_span":null,"name":"FromHexError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":411,"byte_end":13961,"line_start":9,"line_end":485,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":25},{"krate":0,"index":29},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":89},{"krate":0,"index":95},{"krate":0,"index":101},{"krate":0,"index":107},{"krate":0,"index":113},{"krate":0,"index":119},{"krate":0,"index":125},{"krate":0,"index":131},{"krate":0,"index":137},{"krate":0,"index":143},{"krate":0,"index":149},{"krate":0,"index":155},{"krate":0,"index":161},{"krate":0,"index":167},{"krate":0,"index":173},{"krate":0,"index":179},{"krate":0,"index":185},{"krate":0,"index":191},{"krate":0,"index":197},{"krate":0,"index":203},{"krate":0,"index":209},{"krate":0,"index":215},{"krate":0,"index":221},{"krate":0,"index":227},{"krate":0,"index":233},{"krate":0,"index":239},{"krate":0,"index":245},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":263},{"krate":0,"index":269},{"krate":0,"index":275},{"krate":0,"index":281},{"krate":0,"index":287},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":305},{"krate":0,"index":311},{"krate":0,"index":317},{"krate":0,"index":323},{"krate":0,"index":329},{"krate":0,"index":335},{"krate":0,"index":341},{"krate":0,"index":347},{"krate":0,"index":353},{"krate":0,"index":359},{"krate":0,"index":365},{"krate":0,"index":371},{"krate":0,"index":377},{"krate":0,"index":383},{"krate":0,"index":389},{"krate":0,"index":395},{"krate":0,"index":401},{"krate":0,"index":407},{"krate":0,"index":413},{"krate":0,"index":419},{"krate":0,"index":425},{"krate":0,"index":431},{"krate":0,"index":437},{"krate":0,"index":443},{"krate":0,"index":449},{"krate":0,"index":455},{"krate":0,"index":461},{"krate":0,"index":467},{"krate":0,"index":473},{"krate":0,"index":479},{"krate":0,"index":485},{"krate":0,"index":491},{"krate":0,"index":497},{"krate":0,"index":503},{"krate":0,"index":509},{"krate":0,"index":515},{"krate":0,"index":521},{"krate":0,"index":527},{"krate":0,"index":533},{"krate":0,"index":539},{"krate":0,"index":545},{"krate":0,"index":551},{"krate":0,"index":557},{"krate":0,"index":563},{"krate":0,"index":569},{"krate":0,"index":575},{"krate":0,"index":581},{"krate":0,"index":587},{"krate":0,"index":593},{"krate":0,"index":599},{"krate":0,"index":605},{"krate":0,"index":611},{"krate":0,"index":617},{"krate":0,"index":623},{"krate":0,"index":629},{"krate":0,"index":635},{"krate":0,"index":641},{"krate":0,"index":647},{"krate":0,"index":653},{"krate":0,"index":659},{"krate":0,"index":665},{"krate":0,"index":671},{"krate":0,"index":677},{"krate":0,"index":683},{"krate":0,"index":689},{"krate":0,"index":695},{"krate":0,"index":701},{"krate":0,"index":707},{"krate":0,"index":713},{"krate":0,"index":719},{"krate":0,"index":725},{"krate":0,"index":731},{"krate":0,"index":737},{"krate":0,"index":743},{"krate":0,"index":749},{"krate":0,"index":755},{"krate":0,"index":761},{"krate":0,"index":767},{"krate":0,"index":773},{"krate":0,"index":779},{"krate":0,"index":785},{"krate":0,"index":791},{"krate":0,"index":797},{"krate":0,"index":803},{"krate":0,"index":809},{"krate":0,"index":815},{"krate":0,"index":821},{"krate":0,"index":827},{"krate":0,"index":833},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":851},{"krate":0,"index":857},{"krate":0,"index":863},{"krate":0,"index":869},{"krate":0,"index":875},{"krate":0,"index":881},{"krate":0,"index":887},{"krate":0,"index":893},{"krate":0,"index":899},{"krate":0,"index":905},{"krate":0,"index":911},{"krate":0,"index":917},{"krate":0,"index":923},{"krate":0,"index":929},{"krate":0,"index":935},{"krate":0,"index":941},{"krate":0,"index":947},{"krate":0,"index":953},{"krate":0,"index":959},{"krate":0,"index":965},{"krate":0,"index":971},{"krate":0,"index":977},{"krate":0,"index":983},{"krate":0,"index":989},{"krate":0,"index":995},{"krate":0,"index":1001},{"krate":0,"index":1007},{"krate":0,"index":1013},{"krate":0,"index":1019},{"krate":0,"index":1025},{"krate":0,"index":1031},{"krate":0,"index":1037},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"! Encoding and decoding hex strings.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":411,"byte_end":449,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":450,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! For most cases, you can simply use the [`decode`], [`encode`] and","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":454,"byte_end":523,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"! [`encode_upper`] functions. If you need a bit more control, use the traits","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":524,"byte_end":602,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"! [`ToHex`] and [`FromHex`] instead.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":603,"byte_end":641,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":642,"byte_end":645,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":646,"byte_end":659,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":660,"byte_end":663,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":664,"byte_end":671,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"! let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":672,"byte_end":721,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":722,"byte_end":725,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! println!(\"{}\", hex_string); // Prints \"48656c6c6f20776f726c6421\"","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":726,"byte_end":794,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":795,"byte_end":798,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! # assert_eq!(hex_string, \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":799,"byte_end":856,"line_start":22,"line_end":22,"column_start":1,"column_end":58}},{"value":"! ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":857,"byte_end":864,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"allow(clippy :: unreadable_literal)","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1001,"byte_end":1038,"line_start":28,"line_end":28,"column_start":1,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":73},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14215,"byte_end":14234,"line_start":8,"line_end":8,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::error::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14122,"byte_end":14190,"line_start":6,"line_end":6,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14195,"byte_end":14210,"line_start":7,"line_end":7,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":76},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14361,"byte_end":14370,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::error::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14267,"byte_end":14338,"line_start":10,"line_end":10,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14343,"byte_end":14356,"line_start":11,"line_end":11,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":78},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14543,"byte_end":14562,"line_start":17,"line_end":17,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::error::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14377,"byte_end":14450,"line_start":14,"line_end":14,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14455,"byte_end":14522,"line_start":15,"line_end":15,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14527,"byte_end":14538,"line_start":16,"line_end":16,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":72},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14103,"byte_end":14115,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::error::FromHexError","value":"pub enum FromHexError {\n\n    /// An invalid character was found. Valid ones are: `0...9`, `a...f`\n    /// or `A...F`.\n    InvalidHexCharacter {\n        c: char,\n        index: usize,\n    },\n\n    /// A hex string's length needs to be even, as two digits correspond to\n    /// one byte.\n    OddLength,\n\n    /// If the hex string is decoded into a fixed sized container, such as an\n    /// array, the hex string's length * 2 has to match the container's\n    /// length.\n    InvalidStringLength,\n}","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":78}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":13979,"byte_end":14052,"line_start":3,"line_end":3,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1883,"byte_end":1888,"line_start":61,"line_end":61,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":13}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1405,"byte_end":1439,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1440,"byte_end":1443,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1444,"byte_end":1521,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1522,"byte_end":1573,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1574,"byte_end":1577,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1578,"byte_end":1591,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1592,"byte_end":1595,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1596,"byte_end":1603,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1604,"byte_end":1623,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", \"Hello world!\".encode_hex::<String>());","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1628,"byte_end":1686,"line_start":56,"line_end":56,"column_start":1,"column_end":59}},{"value":"/ # assert_eq!(\"Hello world!\".encode_hex::<String>(), \"48656c6c6f20776f726c6421\".to_string());","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1687,"byte_end":1783,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1784,"byte_end":1791,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1792,"byte_end":1795,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use [`encode()`].","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1796,"byte_end":1872,"line_start":60,"line_end":60,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2018,"byte_end":2028,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"::ToHex::encode_hex","value":"pub fn encode_hex<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `f9b4ca`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1895,"byte_end":1969,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `f9b4ca`)","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":1974,"byte_end":2010,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2199,"byte_end":2215,"line_start":68,"line_end":68,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"::ToHex::encode_hex_upper","value":"pub fn encode_hex_upper<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `F9B4CA`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2076,"byte_end":2150,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `F9B4CA`)","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2155,"byte_end":2191,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4406,"byte_end":4413,"line_start":154,"line_end":154,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":3968,"byte_end":4016,"line_start":134,"line_end":134,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4017,"byte_end":4020,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4021,"byte_end":4087,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4088,"byte_end":4091,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4092,"byte_end":4105,"line_start":138,"line_end":138,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4106,"byte_end":4109,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4110,"byte_end":4117,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ use hex::FromHex;","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4118,"byte_end":4139,"line_start":141,"line_end":141,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4140,"byte_end":4143,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ match Vec::from_hex(\"48656c6c6f20776f726c6421\") {","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4144,"byte_end":4197,"line_start":143,"line_end":143,"column_start":1,"column_end":54}},{"value":"/     Ok(vec) => {","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4198,"byte_end":4218,"line_start":144,"line_end":144,"column_start":1,"column_end":21}},{"value":"/         for b in vec {","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4219,"byte_end":4245,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"/             println!(\"{}\", b as char);","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4246,"byte_end":4288,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4289,"byte_end":4302,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4303,"byte_end":4312,"line_start":148,"line_end":148,"column_start":1,"column_end":10}},{"value":"/     Err(e) => {","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4313,"byte_end":4332,"line_start":149,"line_end":149,"column_start":1,"column_end":20}},{"value":"/         // Deal with the error ...","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4333,"byte_end":4371,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4372,"byte_end":4381,"line_start":151,"line_end":151,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4382,"byte_end":4387,"line_start":152,"line_end":152,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4388,"byte_end":4395,"line_start":153,"line_end":153,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4432,"byte_end":4437,"line_start":155,"line_end":155,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4716,"byte_end":4724,"line_start":162,"line_end":162,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"pub fn from_hex<T: AsRef<[u8]>>(T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4444,"byte_end":4518,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4523,"byte_end":4552,"line_start":158,"line_end":158,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4557,"byte_end":4560,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4565,"byte_end":4632,"line_start":160,"line_end":160,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4637,"byte_end":4708,"line_start":161,"line_end":161,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7385,"byte_end":7391,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":6884,"byte_end":6944,"line_start":233,"line_end":233,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":6945,"byte_end":6948,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":6949,"byte_end":7022,"line_start":235,"line_end":235,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7023,"byte_end":7101,"line_start":236,"line_end":236,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7102,"byte_end":7180,"line_start":237,"line_end":237,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7181,"byte_end":7200,"line_start":238,"line_end":238,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7201,"byte_end":7204,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7205,"byte_end":7218,"line_start":240,"line_end":240,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7219,"byte_end":7222,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7223,"byte_end":7230,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7231,"byte_end":7303,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7304,"byte_end":7369,"line_start":244,"line_end":244,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7370,"byte_end":7377,"line_start":245,"line_end":245,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7790,"byte_end":7802,"line_start":260,"line_end":260,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"pub fn encode_upper<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7454,"byte_end":7514,"line_start":250,"line_end":250,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7515,"byte_end":7518,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7519,"byte_end":7593,"line_start":252,"line_end":252,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7594,"byte_end":7597,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7598,"byte_end":7611,"line_start":254,"line_end":254,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7612,"byte_end":7615,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7616,"byte_end":7623,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7624,"byte_end":7702,"line_start":257,"line_end":257,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7703,"byte_end":7774,"line_start":258,"line_end":258,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7775,"byte_end":7782,"line_start":259,"line_end":259,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8361,"byte_end":8367,"line_start":280,"line_end":280,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7871,"byte_end":7911,"line_start":264,"line_end":264,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7912,"byte_end":7915,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7916,"byte_end":7995,"line_start":266,"line_end":266,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":7996,"byte_end":8075,"line_start":267,"line_end":267,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8076,"byte_end":8079,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8080,"byte_end":8093,"line_start":269,"line_end":269,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8094,"byte_end":8097,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8098,"byte_end":8105,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8106,"byte_end":8121,"line_start":272,"line_end":272,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8122,"byte_end":8170,"line_start":273,"line_end":273,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8171,"byte_end":8221,"line_start":274,"line_end":274,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8222,"byte_end":8228,"line_start":275,"line_end":275,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8229,"byte_end":8232,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8233,"byte_end":8303,"line_start":277,"line_end":277,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8304,"byte_end":8345,"line_start":278,"line_end":278,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8346,"byte_end":8353,"line_start":279,"line_end":279,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8866,"byte_end":8881,"line_start":296,"line_end":296,"column_start":8,"column_end":23},"name":"decode_to_slice","qualname":"::decode_to_slice","value":"pub fn decode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a hex string into a mutable bytes slice.","sig":null,"attributes":[{"value":"/ Decode a hex string into a mutable bytes slice.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8459,"byte_end":8510,"line_start":284,"line_end":284,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8511,"byte_end":8514,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8515,"byte_end":8594,"line_start":286,"line_end":286,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8595,"byte_end":8674,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8675,"byte_end":8678,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8679,"byte_end":8692,"line_start":289,"line_end":289,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8693,"byte_end":8696,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8697,"byte_end":8704,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ let mut bytes = [0u8; 4];","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8705,"byte_end":8734,"line_start":292,"line_end":292,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(hex::decode_to_slice(\"6b697769\", &mut bytes as &mut [u8]), Ok(()));","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8735,"byte_end":8817,"line_start":293,"line_end":293,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(&bytes, b\"kiwi\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8818,"byte_end":8850,"line_start":294,"line_end":294,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":8851,"byte_end":8858,"line_start":295,"line_end":295,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10178,"byte_end":10193,"line_start":348,"line_end":348,"column_start":8,"column_end":23},"name":"encode_to_slice","qualname":"::encode_to_slice","value":"pub fn encode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes some bytes into a mutable slice of bytes.","sig":null,"attributes":[{"value":"/ Encodes some bytes into a mutable slice of bytes.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9726,"byte_end":9779,"line_start":331,"line_end":331,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9780,"byte_end":9783,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ The output buffer, has to be able to hold at least `input.len() * 2` bytes,","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9784,"byte_end":9863,"line_start":333,"line_end":333,"column_start":1,"column_end":80}},{"value":"/ otherwise this function will return an error.","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9864,"byte_end":9913,"line_start":334,"line_end":334,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9914,"byte_end":9917,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9918,"byte_end":9931,"line_start":336,"line_end":336,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9932,"byte_end":9935,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9936,"byte_end":9943,"line_start":338,"line_end":338,"column_start":1,"column_end":8}},{"value":"/ # use hex::FromHexError;","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9944,"byte_end":9972,"line_start":339,"line_end":339,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), FromHexError> {","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":9973,"byte_end":10018,"line_start":340,"line_end":340,"column_start":1,"column_end":46}},{"value":"/ let mut bytes = [0u8; 4 * 2];","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10019,"byte_end":10052,"line_start":341,"line_end":341,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10053,"byte_end":10056,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ hex::encode_to_slice(b\"kiwi\", &mut bytes)?;","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10057,"byte_end":10104,"line_start":343,"line_end":343,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(&bytes, b\"6b697769\");","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10105,"byte_end":10141,"line_start":344,"line_end":344,"column_start":1,"column_end":37}},{"value":"/ # Ok(())","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10142,"byte_end":10154,"line_start":345,"line_end":345,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10155,"byte_end":10162,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":10163,"byte_end":10170,"line_start":347,"line_end":347,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14618,"byte_end":14630,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14657,"byte_end":14669,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2509,"byte_end":2524,"line_start":80,"line_end":80,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2753,"byte_end":2768,"line_start":90,"line_end":90,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":3341,"byte_end":3356,"line_start":110,"line_end":110,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":3710,"byte_end":3711,"line_start":124,"line_end":124,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":5114,"byte_end":5117,"line_start":177,"line_end":177,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14618,"byte_end":14630,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":72},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/error.rs","byte_start":14657,"byte_end":14669,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":72},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2509,"byte_end":2524,"line_start":80,"line_end":80,"column_start":10,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":2753,"byte_end":2768,"line_start":90,"line_end":90,"column_start":23,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":19},"to":{"krate":2,"index":4984}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":3341,"byte_end":3356,"line_start":110,"line_end":110,"column_start":38,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":19},"to":{"krate":2,"index":4939}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":3710,"byte_end":3711,"line_start":124,"line_end":124,"column_start":32,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":4415,"byte_end":4420,"line_start":154,"line_end":154,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1927},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/andreim/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.2/src/lib.rs","byte_start":5114,"byte_end":5117,"line_start":177,"line_end":177,"column_start":18,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":4228},"to":{"krate":0,"index":47}}]}